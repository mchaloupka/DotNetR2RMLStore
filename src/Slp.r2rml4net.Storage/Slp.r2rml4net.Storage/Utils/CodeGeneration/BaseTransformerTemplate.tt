<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// This is generated code, do not edit!!!
<#+
    void AddUsing(string namespaceName)
    {
#>
using <#= namespaceName #>;
<#+
    }

    void GenerateClassHeader(string namespaceName, string className, string visitorName, string inheritsFromName)
    {
#>
namespace <#= namespaceName #>
{
    /// <summary>
    /// Base generated transformer for <see cref="<#= visitorName #>" />
    /// </summary>
    /// <typeparam name="T">Type of parameter passed to process</typeparam>
    /// <typeparam name="TR">Type of the transformation result</typeparam>
    public abstract class <#= className #><T, TR>
        <#+ 
        var inheritsFrom = (new string[] { visitorName, inheritsFromName }).Where(x => !string.IsNullOrEmpty(x)).ToArray();

        if(inheritsFrom.Length > 0)
        {
            Write(": ");

            for(int i = 0; i < inheritsFrom.Length; i++)
            {
                if(i > 0)
                    Write(", ");

                Write(inheritsFrom[i]);
            }

            WriteLine("");
        }
    #>
    {
<#+
    }

    void GenerateCommonMethods(string parameterType) 
    {
#>
        /// <summary>
        /// Transforms the <see cref="<#= parameterType #>" />.
        /// </summary>
        /// <param name="instance">The instance to tranform.</param>
        /// <param name="data">The passed data.</param>
        /// <returns>The transformed calculus source.</returns>
        public TR Transform(<#= parameterType #> instance, T data)
        {
            return (TR)instance.Accept(this, data);
        }

        /// <summary>
        /// Preprocess for the transformation.
        /// </summary>
        /// <param name="toTransform">Instance to be transformed</param>
        /// <param name="data">The passed data</param>
        /// <typeparam name="TI">Type of the instance</typeparam>
        /// <returns><c>true</c> if transformation should continue, <c>false</c> the fallback should be used.</returns>
        protected virtual bool CommonPreTransform<TI>(ref TI toTransform, T data) where TI : <#= parameterType #>
        {
            return true;
        }

        /// <summary>
        /// Postprocess for the transformation.
        /// </summary>
        /// <param name="transformed">The transformation result.</param>
        /// <param name="toTransform">The transformed instance</param>
        /// <param name="data">The passed data.</param>
        /// <typeparam name="TI">Type of the instance</typeparam>
        /// <returns>The postprocessed transformation result</returns>
        protected virtual TR CommonPostTransform<TI>(TR transformed, TI toTransform, T data) where TI : <#= parameterType #>
        {
            return transformed;
        }

        /// <summary>
        /// Fallback variant for the transformation.
        /// </summary>
        /// <param name="toTransform">Instance to be transformed.</param>
        /// <param name="data">The passed data.</param>
        /// <typeparam name="TI">Type of the instance</typeparam>
        /// <returns>The transformation result</returns>
        protected abstract TR CommonFallbackTransform<TI>(TI toTransform, T data) where TI : <#= parameterType #>;

<#+
    }

    void GenerateMethods(string parameterType)
    {
#>
        /// <summary>
        /// Visits <see cref="<#= parameterType #>" />
        /// </summary>
        /// <param name="toVisit">The visited instance</param>
        /// <param name="data">The passed data</param>
        /// <returns>The returned data</returns>
        public object Visit(<#= parameterType #> toVisit, object data)
        {
            var tData = (T)data;
            if(PreTransform(ref toVisit, tData))
            {
                var transformed = Transform(toVisit, tData);
                return PostTransform(transformed, toVisit, tData);
            }
            else
            {
                return FallbackTransform(toVisit, tData);
            }
        }

        /// <summary>
        /// Process the <see cref="<#= parameterType #>"/>
        /// </summary>
        /// <param name="toTransform">The instance to process</param>
        /// <param name="data">The passed data</param>
        /// <returns>The transformation result</returns>
        protected abstract TR Transform(<#= parameterType #> toTransform, T data);

        /// <summary>
        /// Preprocess for the transformation.
        /// </summary>
        /// <param name="toTransform">Instance to be transformed</param>
        /// <param name="data">The passed data</param>
        /// <returns><c>true</c> if transformation should continue, <c>false</c> the fallback should be used.</returns>
        protected virtual bool PreTransform(ref <#= parameterType #> toTransform, T data)
        {
            return CommonPreTransform(ref toTransform, data);
        }

        /// <summary>
        /// Postprocess for the transformation.
        /// </summary>
        /// <param name="transformed">The transformation result.</param>
        /// <param name="toTransform">The transformed instance</param>
        /// <param name="data">The passed data.</param>
        /// <returns>The postprocessed transformation result</returns>
        protected virtual TR PostTransform(TR transformed, <#= parameterType #> toTransform, T data)
        {
            return CommonPostTransform(transformed, toTransform, data);
        }

        /// <summary>
        /// Fallback variant for the transformation.
        /// </summary>
        /// <param name="toTransform">Instance to be transformed.</param>
        /// <param name="data">The passed data.</param>
        /// <returns>The transformation result</returns>
        protected virtual TR FallbackTransform(<#= parameterType #> toTransform, T data)
        {
            return CommonFallbackTransform(toTransform, data);
        }

<#+
    }

    void GenerateClassFooter()
    {
        #>
    }
}
<#+
    }
#>