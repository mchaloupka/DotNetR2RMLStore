<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../../../Utils/CodeGeneration/BaseTransformerTemplate.tt"#>
<#
    AddUsing("Slp.r2rml4net.Storage.Sparql.Algebra");
    AddUsing("Slp.r2rml4net.Storage.Sparql.Algebra.Patterns");
    WriteLine("");

    GenerateClassHeader("Slp.r2rml4net.Storage.Sparql.Utils.CodeGeneration", "BaseGraphPatternTransformerG", "IPatternVisitor", "BaseModifierTransformerG<T, T1>"
        , new Tuple<string, string>("T1", "Type of the transformation result when processing <see cref=\"IModifier\" />"));

    GenerateMainTransformMethod("IGraphPattern");
    GenerateCommonMethods("IGraphPattern", false);

    GenerateMethods("EmptyPattern");
    GenerateMethods("FilterPattern");
    GenerateMethods("GraphPattern");
    GenerateMethods("JoinPattern");
    GenerateMethods("LeftJoinPattern");
    GenerateMethods("MinusPattern");
    GenerateMethods("TriplePattern");
    GenerateMethods("UnionPattern");
    GenerateMethods("NotMatchingPattern");
    GenerateMethods("RestrictedTriplePattern");

    GenerateClassFooter();
#>