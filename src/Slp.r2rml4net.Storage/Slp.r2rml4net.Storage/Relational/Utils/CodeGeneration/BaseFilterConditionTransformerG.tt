<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../../../Utils/CodeGeneration/BaseTransformerTemplate.tt"#>
<#
    AddUsing("Slp.r2rml4net.Storage.Relational.Query");
    AddUsing("Slp.r2rml4net.Storage.Relational.Query.Conditions");
    WriteLine("");

    GenerateClassHeader("Slp.r2rml4net.Storage.Relational.Utils.CodeGeneration", "BaseFilterConditionTransformerG", "IFilterConditionVisitor", "BaseSourceTransformerG<T, T1>"
        , new Tuple<string, string>("T1", "Type of the transformation result when processing <see cref=\"ICalculusSource\" />"));

    GenerateMainTransformMethod("IFilterCondition");

    GenerateCommonMethods("IFilterCondition", false);

    GenerateMethods("AlwaysFalseCondition");
    GenerateMethods("AlwaysTrueCondition");
    GenerateMethods("ConjunctionCondition");
    GenerateMethods("DisjunctionCondition");
    GenerateMethods("EqualExpressionCondition");
    GenerateMethods("EqualVariablesCondition");
    GenerateMethods("IsNullCondition");
    GenerateMethods("NegationCondition");

    GenerateClassFooter();
#>