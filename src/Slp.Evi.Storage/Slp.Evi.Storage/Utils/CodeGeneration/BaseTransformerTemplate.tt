<#@ assembly name="System.Core" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Text.Encoding" #>
<#@ assembly name="System.Threading.Tasks" #>
<#@ assembly name="$(SolutionDir)/roslyn/Microsoft.CodeAnalysis.dll" #>
<#@ assembly name="$(SolutionDir)/roslyn/Microsoft.CodeAnalysis.CSharp.dll" #>
<#@ assembly name="$(SolutionDir)/roslyn/System.Collections.Immutable.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp.Syntax" #>
// This is generated code, do not edit!!!
using System;
<#+
    void GenerateClass(string namespaceName, string visitorPath, string inheritsFromName, params Tuple<string, string>[] additionalTypeParameters)
    {
        var className = Path.GetFileNameWithoutExtension(Host.TemplateFile);

        var syntaxTree = (CSharpSyntaxTree)CSharpSyntaxTree.ParseText(File.ReadAllText(Host.ResolveAssemblyReference(@"$(ProjectDir)\" + visitorPath)));
        var interfaceDeclaration = syntaxTree.GetRoot().DescendantNodes().OfType<InterfaceDeclarationSyntax>().Single();

        var visitorName = interfaceDeclaration.Identifier.ToString();

        GenerateClassHeader(namespaceName, className, visitorName, inheritsFromName, additionalTypeParameters);

        var parameterType = visitorName.Replace("Visitor", "");

        GenerateMainTransformMethod(parameterType);
        GenerateCommonMethods(parameterType);

        foreach (var method in interfaceDeclaration.Members.OfType<MethodDeclarationSyntax>())
        {
            var firstParameter = method.ParameterList.Parameters.OfType<ParameterSyntax>().First();
            var firstParameterType = firstParameter.Type.ToString();

            GenerateMethods(firstParameterType);
        }

        GenerateClassFooter();
    }

    void GenerateClassHeader(string namespaceName, string className, string visitorName, string inheritsFromName, params Tuple<string, string>[] additionalTypeParameters)
    {
#>
namespace <#= namespaceName #>
{
    /// <summary>
    /// Base generated transformer for <see cref="<#= visitorName #>" />
    /// </summary>
    /// <typeparam name="T">Type of parameter passed to process</typeparam>
    /// <typeparam name="TR">Type of the transformation result</typeparam>
<#+
    foreach (var typeParam in additionalTypeParameters)
    {
#>
    /// <typeparam name="<#= typeParam.Item1 #>"><#= typeParam.Item2 #></typeparam>
<#+
    }
#>
    public abstract class <#= className #><T, TR<#+ foreach (var typeParam in additionalTypeParameters) { Write(", "); Write(typeParam.Item1); } #>>
        <#+ 
        var inheritsFrom = (new string[] { inheritsFromName, visitorName }).Where(x => !string.IsNullOrEmpty(x)).ToArray();

        if(inheritsFrom.Length > 0)
        {
            Write(": ");

            for(int i = 0; i < inheritsFrom.Length; i++)
            {
                if(i > 0)
                    Write(", ");

                Write(inheritsFrom[i]);
            }

            WriteLine("");
        }
    #>
    {
<#+
    }

    void GenerateMainTransformMethod(string parameterType) 
    {
#>
        /// <summary>
        /// Transforms the <see cref="<#= parameterType #>" />.
        /// </summary>
        /// <param name="instance">The instance to transform.</param>
        /// <param name="data">The passed data.</param>
        /// <returns>The transformed calculus source.</returns>
        public TR Transform<#= parameterType.Substring(1) #>(<#= parameterType #> instance, T data)
        {
            return (TR)instance.Accept(this, data);
        }
<#+
    }

    void GenerateCommonMethods(string parameterType) 
    {
#>
        /// <summary>
        /// Decides whether we should use standard or fallback transformation for the transformation.
        /// </summary>
        /// <param name="toTransform">Instance to be transformed</param>
        /// <param name="data">The passed data</param>
        /// <returns><c>true</c> if transformation should process standardly, <c>false</c> the fallback should be used.</returns>
        protected virtual bool CommonShouldTransform(<#= parameterType #> toTransform, T data)
        {
            return true;
        }

        /// <summary>
        /// Post-process for the transformation.
        /// </summary>
        /// <param name="transformed">The transformation result.</param>
        /// <param name="toTransform">The transformed instance</param>
        /// <param name="data">The passed data.</param>
        /// <returns>The post-processed transformation result</returns>
        protected virtual TR CommonPostTransform(TR transformed, <#= parameterType #> toTransform, T data)
        {
            return transformed;
        }

        /// <summary>
        /// Fallback variant for the transformation.
        /// </summary>
        /// <param name="toTransform">Instance to be transformed.</param>
        /// <param name="data">The passed data.</param>
        /// <returns>The transformation result</returns>
        protected virtual TR CommonFallbackTransform(<#= parameterType #> toTransform, T data)
        {
            throw new NotImplementedException();
        }

<#+
    }

    void GenerateMethods(string parameterType)
    {
#>
        /// <summary>
        /// Visits <see cref="<#= parameterType #>" />
        /// </summary>
        /// <param name="toVisit">The visited instance</param>
        /// <param name="data">The passed data</param>
        /// <returns>The returned data</returns>
        public object Visit(<#= parameterType #> toVisit, object data)
        {
            return ProcessVisit(toVisit, (T)data);
        }

        /// <summary>
        /// Processes the visit of <see cref="<#= parameterType #>" />
        /// </summary>
        /// <param name="toVisit">The visited instance</param>
        /// <param name="data">The passed data</param>
        /// <returns>The returned data</returns>
        protected virtual TR ProcessVisit(<#= parameterType #> toVisit, T data) 
        {
            if(ShouldTransform(toVisit, data))
            {
                var transformed = Transform(toVisit, data);
                return PostTransform(transformed, toVisit, data);
            }
            else
            {
                return FallbackTransform(toVisit, data);
            }
        }

        /// <summary>
        /// Process the <see cref="<#= parameterType #>"/>
        /// </summary>
        /// <param name="toTransform">The instance to process</param>
        /// <param name="data">The passed data</param>
        /// <returns>The transformation result</returns>
        protected abstract TR Transform(<#= parameterType #> toTransform, T data);

        /// <summary>
        /// Pre-process for the transformation.
        /// </summary>
        /// <param name="toTransform">Instance to be transformed</param>
        /// <param name="data">The passed data</param>
        /// <returns><c>true</c> if transformation should continue, <c>false</c> the fallback should be used.</returns>
        protected virtual bool ShouldTransform(<#= parameterType #> toTransform, T data)
        {
            return CommonShouldTransform(toTransform, data);
        }

        /// <summary>
        /// Post-process for the transformation.
        /// </summary>
        /// <param name="transformed">The transformation result.</param>
        /// <param name="toTransform">The transformed instance</param>
        /// <param name="data">The passed data.</param>
        /// <returns>The post-processed transformation result</returns>
        protected virtual TR PostTransform(TR transformed, <#= parameterType #> toTransform, T data)
        {
            return CommonPostTransform(transformed, toTransform, data);
        }

        /// <summary>
        /// Fallback variant for the transformation.
        /// </summary>
        /// <param name="toTransform">Instance to be transformed.</param>
        /// <param name="data">The passed data.</param>
        /// <returns>The transformation result</returns>
        protected virtual TR FallbackTransform(<#= parameterType #> toTransform, T data)
        {
            return CommonFallbackTransform(toTransform, data);
        }

<#+
    }

    void GenerateClassFooter()
    {
        #>
    }
}
<#+
    }
#>