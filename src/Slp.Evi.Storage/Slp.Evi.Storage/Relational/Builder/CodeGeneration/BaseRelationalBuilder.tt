<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Text.Encoding" #>
<#@ assembly name="System.Threading.Tasks" #>
<#@ assembly name="$(SolutionDir)/roslyn/Microsoft.CodeAnalysis.dll" #>
<#@ assembly name="$(SolutionDir)/roslyn/Microsoft.CodeAnalysis.CSharp.dll" #>
<#@ assembly name="$(SolutionDir)/roslyn/System.Collections.Immutable.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp.Syntax" #>
// This is generated code, do not edit!!!
using System;
using Microsoft.Extensions.Logging;
using Slp.Evi.Storage.Query;
using Slp.Evi.Storage.Relational.Query;
using Slp.Evi.Storage.Sparql.Algebra.Modifiers;
using Slp.Evi.Storage.Sparql.Algebra.Patterns;

namespace Slp.Evi.Storage.Relational.Builder.CodeGeneration
{
    /// <summary>
    /// Relational builder
    /// </summary>
    public abstract class BaseRelationalBuilder
        : IModifierVisitor, IGraphPatternVisitor
    {
        /// <summary>
        /// The logger
        /// </summary>
        protected readonly ILogger _logger;

        /// <summary>
        /// Initializes a new instance of the <see cref="BaseRelationalBuilder"/> class.
        /// </summary>
        /// <param name="logger">The logger.</param>
        protected BaseRelationalBuilder(ILogger logger)
        {
            _logger = logger;
        }

<#
    GenerateInterface(@"Sparql\Algebra\Patterns\IGraphPatternVisitor.cs");
    GenerateInterface(@"Sparql\Algebra\Modifiers\IModifierVisitor.cs");
#>
    }
}

<#+
    void GenerateInterface(string visitorPath)
    {
        var syntaxTree = (CSharpSyntaxTree)CSharpSyntaxTree.ParseText(File.ReadAllText(Host.ResolveAssemblyReference(@"$(ProjectDir)\" + visitorPath)));
        var interfaceDeclaration = syntaxTree.GetRoot().DescendantNodes().OfType<InterfaceDeclarationSyntax>().Single();

        foreach (var method in interfaceDeclaration.Members.OfType<MethodDeclarationSyntax>())
        {
            var firstParameter = method.ParameterList.Parameters.OfType<ParameterSyntax>().First();
            var firstParameterName = firstParameter.Identifier.ValueText;
            var firstParameterType = firstParameter.Type.ToString();
            GenerateMethod(firstParameterType, firstParameterName);
        }
    }

    void GenerateMethod(string instanceType, string name)
    {
#>
        /// <inheritdoc />
        public object Visit(<#= instanceType #> <#= name #>, object data)
        {
            var context = (IQueryContext) data;
            var transformed = Transform(<#= name #>, context);

            context.DebugLogging.LogTransformation(_logger, <#= name #>, transformed);

            return context.QueryPostProcesses.PostProcess(transformed);
        }

        /// <summary>
        /// Transforms the specified <see cref="<#= instanceType #>" />.
        /// </summary>
        /// <param name="<#= name #>">The instance to transform.</param>
        /// <param name="context">The query context.</param>
        protected abstract RelationalQuery Transform(<#= instanceType #> <#= name #>, IQueryContext context);

<#+
    }
#>