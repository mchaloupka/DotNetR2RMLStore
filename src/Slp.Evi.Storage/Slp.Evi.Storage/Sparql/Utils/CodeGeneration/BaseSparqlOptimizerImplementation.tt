<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Text.Encoding" #>
<#@ assembly name="System.Threading.Tasks" #>
<#@ assembly name="$(SolutionDir)/roslyn/Microsoft.CodeAnalysis.dll" #>
<#@ assembly name="$(SolutionDir)/roslyn/Microsoft.CodeAnalysis.CSharp.dll" #>
<#@ assembly name="$(SolutionDir)/roslyn/System.Collections.Immutable.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp.Syntax" #>
<#@ output extension=".cs" #>
// Generated code, do not edit!!!

using System;
using Slp.Evi.Storage.Sparql.Algebra;
using Slp.Evi.Storage.Sparql.Algebra.Modifiers;
using Slp.Evi.Storage.Sparql.Algebra.Patterns;
using Slp.Evi.Storage.Sparql.Algebra.Expressions;
using Slp.Evi.Storage.Sparql.Optimization.Optimizers;

namespace Slp.Evi.Storage.Sparql.Utils.CodeGeneration
{
    /// <summary>
    /// The base class for SPARQL optimizers
    /// </summary>
    /// <typeparam name="T">Type of parameter passed to process</typeparam>
    public class BaseSparqlOptimizerImplementation<T>
        : BaseSparqlExpressionTransformerG<BaseSparqlOptimizer<T>.OptimizationContext, ISparqlExpression, IGraphPattern, ISparqlQuery>
    {
        /// <summary>
        /// Process the <see cref="ISparqlQuery"/>
        /// </summary>
        /// <param name="toTransform">The instance to process</param>
        /// <param name="data">The passed data</param>
        /// <returns>The transformation result</returns>
        public virtual ISparqlQuery TransformSparqlQuery(ISparqlQuery toTransform, BaseSparqlOptimizer<T>.OptimizationContext data)
        {
            if (toTransform is IModifier)
            {
                return TransformModifier((IModifier)toTransform, data);
            }
            else if (toTransform is IGraphPattern)
            {
                return TransformGraphPattern((IGraphPattern)toTransform, data);
            }
            else
            {
                throw new ArgumentException("Unexpected type of parameter", nameof(toTransform));
            }
        }
<#
    var classDeclarations = new Dictionary<string, ClassDeclarationSyntax>();

    foreach(CSharpSyntaxTree syntaxTree in Directory.EnumerateFiles(Path.GetDirectoryName(Host.TemplateFile))
        .Where(x => Path.GetExtension(x) == ".cs")
        .Select(x => CSharpSyntaxTree.ParseText(File.ReadAllText(x)))
        .Cast<CSharpSyntaxTree>())
    {
        // Get all class declarations in each file
        foreach(ClassDeclarationSyntax classDeclaration in syntaxTree.GetRoot()
            .DescendantNodes()
            .OfType<ClassDeclarationSyntax>())
        {
            var name = classDeclaration.Identifier.ToString();

            if(name.StartsWith("Base")) 
            {
                classDeclarations.Add(name, classDeclaration);
            }
        }
    }

    var toProcess = new Queue<string>();
    toProcess.Enqueue("BaseSparqlExpressionTransformerG");

    var returnTypes = new Queue<string>();
    returnTypes.Enqueue("ISparqlExpression");
    returnTypes.Enqueue("IGraphPattern");
    returnTypes.Enqueue("ISparqlQuery");

    while(toProcess.Count > 0) 
    {
        var name = toProcess.Dequeue();

        if(!classDeclarations.ContainsKey(name))
            continue;

        var returnType = returnTypes.Dequeue();

        var classDeclaration = classDeclarations[name];

        foreach (var baseType in classDeclaration.BaseList.Types.Select(x => x.Type).OfType<GenericNameSyntax>())
        {
            toProcess.Enqueue(baseType.Identifier.ToString());
        }

        foreach (var method in classDeclaration.Members.OfType<MethodDeclarationSyntax>())
        {
            if(method.Body == null) 
            {
                Write(method.ToFullString().Substring(0, method.Modifiers.Span.Start - method.Modifiers.FullSpan.Start));

                Write("protected override ");

                Write(returnType);

                Write(" ");

                Write(method.Identifier.ToString());

                Write("(");

                bool first = true;

                string toReturnMemberName = string.Empty;

                foreach(var parameter in method.ParameterList.Parameters.OfType<ParameterSyntax>())
                {
                    var type = parameter.Type.ToString();

                    if(type == "T") 
                    {
                        type = "BaseSparqlOptimizer<T>.OptimizationContext";
                    }

                    if(first) 
                    {
                        first = false;
                        toReturnMemberName = parameter.Identifier.ToString();
                    }
                    else 
                    {
                        Write(", ");
                    }

                    Write(type);
                    Write(" ");
                    Write(parameter.Identifier.ToString());
                }

                Write(")");

                WriteLine("");
                WriteLine("        {");
                Write("            return ");
                Write(toReturnMemberName);
                WriteLine(";");
                WriteLine("        }");
            }
        }
    }
#>
    }
}
