<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.IO;
using System.Xml.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Slp.Evi.Storage;

namespace Slp.Evi.Test.System.SPARQL.SPARQL_TestSuite
{
    public abstract class TestSuite
        : BaseSPARQLTestSuite
    {
<# BagEqualTest("simple.xml", "Simple", "single"); #>
<# BagEqualTest("simple.xml", "Simple", "join"); #>
<# BagEqualTest("simple.xml", "Simple", "union"); #>
<# BagEqualTest("simple.xml", "Simple", "empty"); #>
<# BagEqualTest("simple.xml", "Simple", "null"); #>
<# BagEqualTest("simple.xml", "Simple", "optional"); #>
<# BagEqualTest("simple.xml", "Simple", "bind"); #>
<# BagEqualTest("simple.xml", "Simple", "nested_optional"); #>
<# BagEqualTest("simple.xml", "Simple", "nested_filter"); #>

<# BagEqualTest("simple.xml", @"Simple\Filter", "bound"); #>
<# BagEqualTest("simple.xml", @"Simple\Filter", "not_bound"); #>
<# BagEqualTest("simple.xml", @"Simple\Filter", "comparison_gt"); #>
<# BagEqualTest("simple.xml", @"Simple\Filter", "comparison_ge"); #>
<# BagEqualTest("simple.xml", @"Simple\Filter", "comparison_lt"); #>
<# BagEqualTest("simple.xml", @"Simple\Filter", "comparison_le"); #>
<# BagEqualTest("simple.xml", @"Simple\Filter", "comparison_eq"); #>
<# BagEqualTest("simple.xml", @"Simple\Filter", "comparison_neq"); #>
<# BagEqualTest("simple.xml", @"Simple\Filter", "disjunction"); #>
<# BagEqualTest("simple.xml", @"Simple\Filter", "conjunction"); #>

<# BagEqualTest("students.xml", "Students", "no_result"); #>
<# BagEqualTest("students.xml", "Students", "student_names"); #>
<# EqualTest("students.xml", "Students", "student_names_order"); #>
<# EqualTest("students.xml", "Students", "student_names_order_desc"); #>
<# EqualTest("students.xml", "Students", "student_names_order_limit"); #>
<# EqualTest("students.xml", "Students", "student_names_order_offset"); #>
<# EqualTest("students.xml", "Students", "student_names_order_offset_limit"); #>

<# EqualTest("bsbm.xml", "Bsbm", "ProductType_OrderBy"); #>

        protected abstract EviQueryableStorage GetStorage(string storageName);

        private XDocument GetExpected(string resultFile)
        {
            var doc = XDocument.Load(GetPath(resultFile));
            return doc;
        }

        private static string GetQuery(string queryFile)
        {
            var query = string.Empty;

            using (var fsr = new FileStream(GetPath(queryFile), FileMode.Open, FileAccess.Read))
            using (var sr = new StreamReader(fsr))
            {
                query = sr.ReadToEnd();
            }

            return query;
        }

        protected static readonly string[] StorageNames = {<#
            bool firstDataSet = true;

            foreach (var datasetName in datasetNames)
            {
                if (firstDataSet)
                {
                    firstDataSet = false;
                }
                else
                {
                    Write(",");
                }

                Write(" \"{0}\"", datasetName);
            }#> };
    }
}
<#+
    readonly List<string> datasetNames = new List<string>();

    void BagEqualTest(string dataset, string folder, string name)
    {
        if (!datasetNames.Contains(dataset))
        {
            datasetNames.Add(dataset);
        }

#>
        [TestMethod]
        public void <#= GetTestName(folder, name) #>()
        {
            var storage = GetStorage("<#= dataset #>");
            var queryFile = @"Data\\<#= folder #>\\<#= name #>.rq";
            var resultFile = @"Data\\<#= folder #>\\<#= name #>.srx";
            var query = GetQuery(queryFile);
            var result = storage.Query(query);
            var expected = GetExpected(resultFile);
            AssertBagEqual(expected, result);
        }

<#+
    }

    void EqualTest(string dataset, string folder, string name)
    {
        if (!datasetNames.Contains(dataset))
        {
            datasetNames.Add(dataset);
        }

#>
        [TestMethod]
        public void <#= GetTestName(folder, name) #>()
        {
            var storage = GetStorage("<#= dataset #>");
            var queryFile = @"Data\\<#= folder #>\\<#= name #>.rq";
            var resultFile = @"Data\\<#= folder #>\\<#= name #>.srx";
            var query = GetQuery(queryFile);
            var result = storage.Query(query);
            var expected = GetExpected(resultFile);
            AssertEqual(expected, result);
        }

<#+
    }

    string GetTestName(string folder, string name)
    {
        return $"{folder.Replace("\\", "_")}_{name}";
    }
#>
